<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DocumentDeleteConfirm" xml:space="preserve">
    <value>Are you sure you want to delete this document?</value>
  </data>
  <data name="DocumentDeleteSuccess" xml:space="preserve">
    <value>Document deleted successfully</value>
  </data>
  <data name="DocumentSavedSuccess" xml:space="preserve">
    <value>Document saved successfully</value>
  </data>
  <data name="DocumentsTableDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DocumentsTableTitle" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="DocumentsTableUpdated" xml:space="preserve">
    <value>Updated</value>
  </data>
  <data name="IncorrectProduct" xml:space="preserve">
    <value>Incorrect Product</value>
  </data>
  <data name="Solutions" xml:space="preserve">
    <value>Solutions</value>
  </data>
  <data name="SolutionsHeader" xml:space="preserve">
    <value>Digital books, online magazines, learning systems</value>
  </data>
  <data name="SolutionsText" xml:space="preserve">
    <value>Information technology is something we are good at, and we are happy to make this expertise available to our clients. Working together, we can find solutions that help you make the most of cutting-edge information technology.</value>
  </data>
  <data name="TimeBase" xml:space="preserve">
    <value>TimeBase</value>
  </data>
  <data name="TimeBaseHeader" xml:space="preserve">
    <value>Edit your material</value>
  </data>
  <data name="TimeBaseText" xml:space="preserve">
    <value>Edit your material anywhere, anytime.You can use Microsoft Word, Open Office, Adobe FrameMaker, Adobe InDesign, a free XML editor or an Internet browser to edit text. TimeBase is an editor’s tool that is always at the ready.
            TimeBase provides a secure location for storing your material.A centralised system makes it easy to use the material for a variety of products and projects - also enabling the automatic creation of daily backup copies.
            Various tools can be integrated into the TimeBase editorial system - for example to collect material from contributors using online editing.</value>
  </data>
  <data name="TimePub" xml:space="preserve">
    <value>TimePub</value>
  </data>
  <data name="TimePubHeader" xml:space="preserve">
    <value>Multi-channel publishing</value>
  </data>
  <data name="TimePubLi1" xml:space="preserve">
    <value>Search results</value>
  </data>
  <data name="TimePubLi2" xml:space="preserve">
    <value>Outgoing or incoming links</value>
  </data>
  <data name="TimePubLi3" xml:space="preserve">
    <value>Table of contents</value>
  </data>
  <data name="TimePubLi4" xml:space="preserve">
    <value>Bookmarks</value>
  </data>
  <data name="TimePubLi5" xml:space="preserve">
    <value>Index</value>
  </data>
  <data name="TimePubLi6" xml:space="preserve">
    <value>Concept map</value>
  </data>
  <data name="TimePubLi7" xml:space="preserve">
    <value>Editor’s picks</value>
  </data>
  <data name="TimePubText" xml:space="preserve">
    <value>The same material can be turned into a variety of products and services for different platforms. In electronic publishing, a responsive website can cater for a wide range of devices including PCs, mobile phones and tablets; while layout software, such as Indesign, Adobe FrameMaker, MS Word, Open Office, can be used to produce print publications.
Users can navigate through an electronic publication using:</value>
  </data>
  <data name="TimeShop" xml:space="preserve">
    <value>TimeShop</value>
  </data>
  <data name="TimeShopHeader" xml:space="preserve">
    <value>Our online store platform</value>
  </data>
  <data name="TimeShopText" xml:space="preserve">
    <value>TimeShop is an innovative online store solution ideal for large and medium-sized companies operating nationally or internationally.
            TimeShop is much more than a shopping basket and an e-payment system. Our online store platform can be used to its full potential by integrating it with customer relationship management and marketing systems. Product delivery can also be automated for extra efficiency.</value>
  </data>
  <data name="UploadDocuments" xml:space="preserve">
    <value>Upload Documents</value>
  </data>
</root>